// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  emailVerified Boolean   @default(false)
  image         String?
  username      String?   @unique
  instansi      String?
  nomorHp       String?
  role          String    @default("visitor")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
}

model Account {
  id         String   @id @default(cuid())
  accountId  String
  providerId String
  userId     String
  password   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  
  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  identifier String   // User email
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  
  @@unique([identifier, token])
}

model QueueItem {
  id          String    @id @default(cuid())
  type        String    // Type of queue item (e.g., 'verification-email')
  status      String    // Status: pending, processing, completed, failed
  data        String    // JSON data for the task
  attempts    Int       @default(0) // Number of processing attempts
  maxAttempts Int       @default(3) // Maximum number of attempts
  processAt   DateTime  @default(now()) // When to process this item
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime? // When it was completed
  error       String?   // Error message if failed
  
  @@index([status, processAt]) // Index for efficient querying
}